////Java runtime Environment
    Incluye las bibliotecas de códigos de la JVM y los componentes que son necesarios para programas en ejecución escritos en el lenguaje Java
////Configuracion del entorno de desarrollo de Java
    
    Entorno de desarrollo
    Instale JDK 1.8
    Instale Eclipse Oomph
    Configurar Eclipse 
        Window -: Show View -:
        Package explorer
        Out line
////Conceptos de programacion Orientada a objetos
    Se tiene estructuras de datos por una parte y luego instrucciones del programa que actúan sobre esos datos
   Un objeto es una entidad independiente que contiene atributos y comportamientos, en la OOP se combina datos y la logica del programa en diferentes niveles
        /*FundsTransfer*/ TRansferir dinero de una cuenta bancaria a otra
////Objetos Padre e hijo 
    Un objeto padre es aque que sirve como la base estructural para derivar objetos hijos mas complejos,En OOP permite utilizar atributos y comportamientos comunes del objeto padre
    Herencia
////Comunicacion y coordinacion de objetos
    Los objetos se comunican con otros por medio del envio de mensajes llamdos metodos
////MVC Modelo Vista Controlador
    estilo de arquitectura de software
    (Datos,modelo)
    Acceder a la capa de almacenamiento de datos
    Independiente del sistema de almacenamiento
    Se definen las condiciones del tipo de datos
    
    (Interfaz,vista)
    Recibir Datos de modelo y mostrarlo al usuario
    Contiene un registro controlador asociado
     
    (logica de control,controlador)
    Eventos de entrada(un clic,cambio en campo de texto, etc)
    Contiene las reglas de gestion de eventos(si el evento z entonce la accion W)
    
    
    El usuario interactúa con la interfaz de usuario de alguna forma (por ejemplo, el usuario pulsa un botón, enlace, etc.)
El controlador recibe (por parte de los objetos de la interfaz-vista) la notificación de la acción solicitada por el usuario. El controlador gestiona el evento que llega, frecuentemente a través de un gestor de eventos (handler) o callback.
El controlador accede al modelo, actualizándolo, posiblemente modificándolo de forma adecuada a la acción solicitada por el usuario (por ejemplo, el controlador actualiza el carro de la compra del usuario). Los controladores complejos están a menudo estructurados usando un patrón de comando que encapsula las acciones y simplifica su extensión.
El controlador delega a los objetos de la vista la tarea de desplegar la interfaz de usuario. La vista obtiene sus datos del modelo para generar la interfaz apropiada para el usuario donde se refleja los cambios en el modelo (por ejemplo, produce un listado del contenido del carro de la compra). El modelo no debe tener conocimiento directo sobre la vista. Sin embargo, se podría utilizar el patrón Observador para proveer cierta indirección entre el modelo y la vista, permitiendo al modelo notificar a los interesados de cualquier cambio. Un objeto vista puede registrarse con el modelo y esperar a los cambios, pero aun así el modelo en sí mismo sigue sin saber nada de la vista. El controlador no pasa objetos de dominio (el modelo) a la vista aunque puede dar la orden a la vista para que se actualice. Nota: En algunas implementaciones la vista no tiene acceso directo al modelo, dejando que el controlador envíe los datos del modelo a la vista.
La interfaz de usuario espera nuevas interacciones del usuario, comenzando el ciclo nuevamente.
///////////////PRINCIPIOS DE OOP///////////////////////

////Encapsulamiento
Objeto (diferenciado o independiente, publico o privado)

    Especificadores de acceso
////Herencia
    Herencia en funcionamiento
    https://www.abrirllave.com/java/subclases-y-superclases.php
////Polimorfismo


