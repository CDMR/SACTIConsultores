Cadenas y Operadores
  Cadenas
  En lenjuage Java las cadenas son objetos de primera clase, tipo String
    con sus respectivos metodos para ser manejados
    Creacion de una instancia de tipo (o perteneciente a la clase) String
      private String name;
      public String getName(){ return name; }
      String greeting = "hello";
      greeting = new String("hello");
    
    Concatenación de cadenas
      Enlace de cadenas que guardan entre si una relacion logica o de causa y efecto
      Union o sucesion de dos o mas Objetos entre si formando un conjunto o una idea coherente y progresiva      
    Ejemplo
    l.info("Name: "+ p.getName());/*El signo "+" concatena dos strings*/
      Encadenamiento de llamadas de metodos
      public String getName() {
      return firstName.concat(" ").concat(lastName);
      }
      /*Tecnica comunmente utilizada para con Objetos inmutables (Opera sobre el valor cambiado de retorno)
        Los Objetos inmutables son aquellos que no pueden cambiar su estado ya quee sus atributos han sido definidos cono final para proytegerse frente a cambios de codigo
      */
  
 Operadores
  Unario:Solo necesita un operando, Binario: Se necesitan dos aperandos
    +,+a/*byte,short,char*/,-,-,*,/,%,a++/*Calcula antes de incrementar*/,++a/*Aumenta antes de calcular*/,a--,--a,a+=b/*a=a+b*/,a-=b/*a=a-b*/,*=,%=
    Operadores adicionales
      El punto (.) /*Clasifica el nombre de los paquetes e invoca metodos*/
      Los paréntesis(()) /*delimitan una lista separadas por comas de parámetros para un método*/
      new /*cuando le sigue un nombre de constructor (crea instancia del objeto)*/
      
    Operadores condicionales y sentencias de control
     Operadores relacionales y condicionales
      Una decisión en codigo comienza con una expresión booleana/*True/False*//*ASCI: Alt+60 (menor que),Alt+62 (mayor que)*/
       >,>=,<,<=,==,!=,a&&b/*and(evalua a y b)*/,a||b/*or(evalua a y b)*/,!a/*negacion*/,a&b/*(evalua solo b)*/,a|b/*(evalúa solo b)*/,a^b/*XOR*/
      
      Sentencia if
      Evalua una expresion boleana en el parentesis, Si la expresion se evalua como verdadera ejecuta la siguiente sentencia
      
      if (Locale.getDefault().equals(Locale.US))
        ret /= 2.54;// convert from cm to inches
        /*Si se necesita ejecutar mas de una linea se usan llavespara formar una sentencia compuesta
           Las sentencias compuestas agrupan mas sentencias "ASCCI: Alt+123={, Alt+125=}"*/
           
 Ambito Variable
        Cada variable en una aplicacion Java tiene un ambito, o espacio de nombres localizado, al cual usted puede acceder por el nombre dentro del codigo
        Fuera de ese espacio, la variable esta fuera de ambito y se obtiene un error de compilacion.
        
        /*Dentro de SomeClass, someClassVariables es accesible por medio de todos los metodos de instancia
          Dentro de SomeMethod someParameter es visible pero fuera de ese metodo no lo es
          Lo mismo sucede para someLocalVariable
        */
        
          public class SomeClass {
            private String someClassVariable;
            public void someMethod(String someParameter) {
              String someLocalVariable = "Hello";
              if (true) {
                String someOtherLocalVariable = "Howdy";
              }
              someClassVariable = someParameter; // legal
              someLocalVariable = someClassVariable; // also legal
              someOtherLocalVariable = someLocalVariable;// Variable out of scope!
            }
            public void someOtherMethod() {
              someLocalVariable = "Hello there";// That variable is out of scope!
            }
          }
         
         La sentencia else
         
          public int getHeight() {
            int ret;
            if (gender.equals("MALE"))
              ret = height + 2;
            else {
              ret = height;
              Logger.getLogger("Person").info("Being honest about height...");
            }
            return ret;
          }
          
          También puede usar else para realizar una verificación if adicional, del siguiente modo:

            if (conditional) {
              // Block 1
            } else if (conditional2) {
              // Block 2
            } else if (conditional3) {
              // Block 3
            } else {

              // Block 4
            } // End
      
      El operador ternario
        El lenguaje Java proporciona un operador práctico para hacer simples verificaciones de sentencias if/else. Su sintaxis es:
        (conditional) ? statementIfTrue : statementIfFalse;
        Ejemplo:
        public int getHeight() {
          return (gender.equals("MALE")) ? (height + 2) : height;
        }

Bucles
  
  for
  for (initialization; loopWhileTrue; executeAtBottomOfEachLoop) {
  statementsToExecute
  }
  Ejemplo:
  public static void main(String[] args) {
      Logger l = Logger.getLogger(Person.class.getName());
      for (int aa = 0; aa < 3; aa++) {
        Person p = new Person("Joe Q Author", 42, 173, 82, "Brown", "MALE");
        l.info("Loop executing iteration# " + aa);
        l.info("Name: " + p.getName());
        l.info("Age:" + p.getAge());
        l.info("Height (cm):" + p.getHeight());
        l.info("Weight (kg):" + p.getWeight());
        l.info("Eye Color:" + p.getEyeColor());
        l.info("Gender:" + p.getGender());
      }
    }
  /**Class Logger
  java.lang.Object
  java.util.logging.Logger
  extends Object
  Esta clase es utilizada para enviar mensajes a un sistema en especifico
  El nombre puede ser arbitrario pero es recomendable que sea relacionado en el nombre del paquete, clase, del componente a logger
  Es posible Crear loggers Anonimos que no se guardan en en espacio de los nombres Logger
  **/
  
  while
  public static void main(String[] args) {
      Logger l = Logger.getLogger(Person.class.getName());
      int aa = 0;
      while (aa < 3) {
        Person p = new Person("Joe Q Author", 42, 173, 82, "Brown", "MALE");
        l.info("Loop executing iteration# " + aa);
        l.info("Name: " + p.getName());
        l.info("Age:" + p.getAge());
        l.info("Height (cm):" + p.getHeight());
        l.info("Weight (kg):" + p.getWeight());
        l.info("Eye Color:" + p.getEyeColor());
        l.info("Gender:" + p.getGender());
        aa++;
      }
  
  do-while
  int aa = 0;
    do {
      Person p = new Person("Joe Q Author", 42, 173, 82, "Brown", "MALE");
      l.info("Loop executing iteration# " + aa);
      l.info("Name: " + p.getName());
      l.info("Age:" + p.getAge());
      l.info("Height (cm):" + p.getHeight());
      l.info("Weight (kg):" + p.getWeight());
      l.info("Eye Color:" + p.getEyeColor());
      l.info("Gender:" + p.getGender());
      aa++;
    } while (aa < 3);
  
  Ramificacion del bucle
      Sentencia break
      public static void main(String[] args) {
      Logger l = Logger.getLogger(Person.class.getName());
      int aa = 0;
      while (aa < 3) {
        if (aa == 1)
          break;
        Person p = new Person("Joe Q Author", 42, 173, 82, "Brown", "MALE");
        l.info("Loop executing iteration# " + aa);
        l.info("Name: " + p.getName());
        l.info("Age:" + p.getAge());
        l.info("Height (cm):" + p.getHeight());
        l.info("Weight (kg):" + p.getWeight());
        l.info("Eye Color:" + p.getEyeColor());
        l.info("Gender:" + p.getGender());
        aa++;
      }
      
  Continuacion del bucle
    Sentencia continue
      public static void main(String[] args) {
      Logger l = Logger.getLogger(Person.class.getName());
      int aa = 0;
      while (aa < 3) {
        if (aa == 1)
          continue;
        else
          aa++;
        Person p = new Person("Joe Q Author", 42, 173, 82, "Brown", "MALE");
        l.info("Loop executing iteration# " + aa);
        l.info("Name: " + p.getName());
        l.info("Age:" + p.getAge());
        l.info("Height (cm):" + p.getHeight());
        l.info("Weight (kg):" + p.getWeight());
        l.info("Eye Color:" + p.getEyeColor());
        l.info("Gender:" + p.getGender());
      }

Colecciones Java
  Matrices
  Declaracion de una matriz
  Matrices al modo facil
  Carga una Matriz
  El indice de elemtos
  El metodo length
  Matriz de objetos

Ensamblaje y desembalaje
Embalaje automatico y desembalaje automatico

Analisis y conversion de tipos embalados

Listas

Tipo formal

Iterable

Conjuntos

Mapas

Archivo del codigo Java

JAR

Uso de aplicaciones de terceros

Escribir un buen codigo en Java
Mantener pequeñas clases
Nombre metodos con cuidado
Mantenga pequeños los metodos
Use comentarios
Use un estilo consistente
Use registro incorporado
Siguiendo los pasos de Fowler
